{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/qualifiers/source/BaseSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/VideoSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/ImageSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontWeight.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontStyle.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textDecoration.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/serializeCloudinaryCharacters.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStroke.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IStrokeModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStyle.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/prepareColor.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/BaseTextSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/SubtitlesSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/format/FormatQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/base64Encode.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/FetchSource.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createTextStyleFromModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/TextSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source.js"],
  "sourcesContent": ["import { QualifierModel } from \"../../internal/models/QualifierModel.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {QualifierModel}\n * @description An abstract class extended by all Source objects\n */\nclass BaseSource extends QualifierModel {\n    /**\n     * @description Utility function to encode an asset publicID in an overlay\n     * @protected\n     * @example\n     * encodeAssetPublicID('foo/bar'); // -> foo:bar\n     */\n    encodeAssetPublicID(publicID) {\n        return publicID.replace(/\\//g, ':');\n    }\n    /**\n     * @description\n     * Apply a transformation on the image source of the layer\n     * @param {SDK.ImageTransformation} t An image transformation to apply to the layer\n     * @returns {this}\n     */\n    transformation(t) {\n        this._qualifierModel.transformation = t.toJson();\n        this._transformation = t;\n        return this;\n    }\n    /**\n     * @description Returns the Transformation of the source\n     * @return {SDK.Transformation}\n     */\n    getTransformation() {\n        return this._transformation;\n    }\n}\nexport { BaseSource };\n", "import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass VideoSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'video'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        return `${layerType}_video:${encodedPublicID}`;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { VideoSource };\n", "import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass ImageSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'image'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        if (this._format) {\n            return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_${encodedPublicID}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n    toJson() {\n        const result = super.toJson();\n        if (result.publicId && this._format) {\n            result.publicId = `${result.publicId}.${this._format.toString()}`;\n        }\n        return result;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { ImageSource };\n", "/**\n * @description Contains functions to select the font weight.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace FontWeight\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction thin() {\n    return 'thin';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction light() {\n    return 'light';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction normal() {\n    return 'normal';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction bold() {\n    return 'bold';\n}\nconst FontWeight = { bold, light, normal, thin };\nexport { FontWeight, bold, light, normal, thin };\n", "/**\n * @description Contains functions to select the style of the text.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace FontStyle\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontStyle\n */\nfunction normal() {\n    return 'normal';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontStyle\n */\nfunction italic() {\n    return 'italic';\n}\nconst FontStyle = { normal, italic };\nexport { FontStyle, italic, normal };\n", "/**\n * @description Contains functions to select the text decoration to be used with text.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace TextDecoration\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction normal() {\n    return '';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction underline() {\n    return 'underline';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction strikethrough() {\n    return 'strikethrough';\n}\nconst TextDecoration = { normal, underline, strikethrough };\nexport { TextDecoration, normal, underline, strikethrough };\n", "/**\n *\n * @description - Replace (,) and (/) in a string to its URL encoded equivalence\n * @param {string} str\n * @private\n */\nfunction serializeCloudinaryCharacters(str = '') {\n    return str\n        .replace(/,/g, '%2C')\n        .replace(/\\//g, '%2F');\n}\nexport { serializeCloudinaryCharacters };\n", "/**\n * @description Contains function to set the outline stroke.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace TextAlignment\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier Adding a Border-like qualifier to the same action.\n * @memberOf Qualifiers.Stroke\n * @param {number|string|ExpressionQualifier} width The width in pixels.\n * @param {number|string|SystemColors} color The color of the border.\n */\nfunction solid(width, color) {\n    return `bo_${width}px_solid_${color}`;\n}\nconst Stroke = { solid };\nexport { Stroke, solid };\n", "/**\n * Validate that obj is an ISolidStrokeModel\n * @param obj\n */\nexport function isISolidStrokeModel(obj) {\n    return typeof obj === 'object' && obj.width != null && obj.color != null;\n}\n", "import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\n * @summary qualifier\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n * @memberOf Qualifiers\n */\nclass TextStyle extends QualifierModel {\n    /**\n     * @param {string} fontFamily The font family\n     * @param {number | string} fontSize The font size\n     */\n    constructor(fontFamily, fontSize) {\n        super();\n        if (!fontFamily || !fontSize) {\n            throw `You must provide a fontFamily and fontSize to a TextStyle`;\n        }\n        this._qualifierModel.fontFamily = fontFamily;\n        this._qualifierModel.fontSize = fontSize;\n    }\n    /**\n     * @param {number} spacing The spacing between multiple lines in pixels.\n     */\n    lineSpacing(spacing) {\n        this._qualifierModel.lineSpacing = spacing;\n        return this;\n    }\n    /**\n     * @param spacing The spacing between the letters, in pixels.\n     */\n    letterSpacing(spacing) {\n        this._qualifierModel.letterSpacing = spacing;\n        return this;\n    }\n    /**\n     * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\n     * @param {FontAntialiasType|string} antiAlias\n     */\n    fontAntialias(antiAlias) {\n        this._qualifierModel.fontAntialias = antiAlias;\n        return this;\n    }\n    /**\n     * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\n     * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\n     * @param {string} fontFamilyName\n     */\n    fontFamily(fontFamilyName) {\n        this._qualifierModel.fontFamily = fontFamilyName;\n        return this;\n    }\n    /**\n     * @param {number} fontSize The font size\n     */\n    fontSize(fontSize) {\n        this._qualifierModel.fontSize = fontSize;\n        return this;\n    }\n    /**\n     * @param {FontWeightType|string} fontWeight The font weight\n     */\n    fontWeight(fontWeight) {\n        this._qualifierModel.fontWeight = fontWeight;\n        return this;\n    }\n    /**\n     *\n     * @param {string} fontStyle The font style.\n     */\n    fontStyle(fontStyle) {\n        this._qualifierModel.fontStyle = fontStyle;\n        return this;\n    }\n    /**\n     * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\n     */\n    fontHinting(fontHinting) {\n        this._qualifierModel.fontHinting = fontHinting;\n        return this;\n    }\n    /**\n     *\n     * @param {TextDecorationType|string} textDecoration The font decoration type.\n     */\n    textDecoration(textDecoration) {\n        this._qualifierModel.textDecoration = textDecoration;\n        return this;\n    }\n    /**\n     * @param {TextAlignmentType|string} textAlignment The text alignment\n     */\n    textAlignment(textAlignment) {\n        this._qualifierModel.textAlignment = textAlignment;\n        return this;\n    }\n    /**\n     * @description Whether to include an outline stroke. Set the color and weight of the stroke\n     */\n    stroke(textStroke) {\n        if (textStroke) {\n            const strokeStyle = textStroke.split('_');\n            this._qualifierModel.stroke = {\n                width: +(strokeStyle[1].replace('px', '')),\n                color: strokeStyle[strokeStyle.length - 1]\n            };\n        }\n        else {\n            this._qualifierModel.stroke = true;\n        }\n        return this;\n    }\n    toString() {\n        const { stroke } = this._qualifierModel;\n        let strokeStr = '';\n        if (stroke) {\n            strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n        }\n        return [\n            `${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`,\n            this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight,\n            this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle,\n            this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration,\n            this._qualifierModel.textAlignment,\n            strokeStr,\n            this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`,\n            this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`,\n            this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`,\n            this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`\n        ].filter((a) => a).join('_');\n    }\n}\nexport { TextStyle };\n", "/**\n * Returns RGB or Color\n * @private\n * @param color\n */\nexport function prepareColor(color) {\n    if (color) {\n        return color.match(/^#/) ? `rgb:${color.substr(1)}` : color;\n    }\n    else {\n        return color;\n    }\n}\n", "import { BaseSource } from \"../BaseSource.js\";\nimport { TextStyle } from \"../../textStyle.js\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\nclass BaseTextSource extends BaseSource {\n    constructor(text, textStyle) {\n        super();\n        this.type = 'text';\n        this.text = text;\n        this._textStyle = textStyle;\n        this._qualifierModel.sourceType = 'text';\n        this._qualifierModel.text = text;\n        if (textStyle instanceof TextStyle) {\n            this._qualifierModel.textStyle = textStyle.toJson();\n        }\n    }\n    encodeText(text) {\n        return serializeCloudinaryCharacters(text);\n    }\n    textColor(color) {\n        this._textColor = color;\n        this._qualifierModel.textColor = color;\n        return this;\n    }\n    backgroundColor(bgColor) {\n        this._backgroundColor = bgColor;\n        this._qualifierModel.backgroundColor = bgColor;\n        return this;\n    }\n    textFit(textFit) {\n        this._textFit = textFit;\n        return this;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const layerParam = [\n            this.type,\n            this._textStyle && this._textStyle.toString(),\n            this.encodeText(this.text)\n        ].filter((a) => a).join(':');\n        const tmpAction = new Action();\n        tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n        this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n        this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n        this._textFit && tmpAction.addQualifier(this._textFit);\n        return tmpAction.toString();\n    }\n}\nexport { BaseTextSource };\n", "import { BaseTextSource } from \"./BaseTextSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n    constructor(fileName) {\n        super(fileName);\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n        this._qualifierModel = {\n            sourceType: 'subtitles',\n            publicId: fileName\n        };\n    }\n    /**\n     * @description Set the textStyle for the subtitles layer\n     * @param {TextStyle} textStyle\n     */\n    textStyle(textStyle) {\n        this._textStyle = textStyle;\n        this._qualifierModel.textStyle = textStyle.toJson();\n        return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n    encodeText(text) {\n        return text.replace(/\\//g, ':');\n    }\n}\nexport { SubtitlesSource };\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Qualifiers.Format\n * @extends {SDK.QualifierValue}\n */\nclass FormatQualifier extends QualifierValue {\n    constructor(val) {\n        super(val);\n        this.val = val;\n    }\n    getValue() {\n        return this.val;\n    }\n}\nexport { FormatQualifier };\n", "/**\n *\n * @private\n * @description An isomorphic Base64 function, provides browser and server support.\n * @param {string} input - A string to encode with base64\n */\nfunction base64Encode(input) {\n    // Browser\n    let encodedResult = '';\n    if (typeof window !== 'undefined') {\n        // encodeURI the input to support unicode characters\n        // Since the URI might be encoded already, we try to decode it once before\n        encodedResult = btoa(encodeURI(decodeURI(input)));\n    }\n    else {\n        // NodeJS support\n        encodedResult = global.Buffer.from(input).toString('base64');\n    }\n    return encodedResult\n        .replace(/\\+/g, '-') // Convert '+' to '-'\n        .replace(/\\//g, '_'); // Convert '/' to '_';\n}\nexport { base64Encode };\n", "import { BaseSource } from \"../BaseSource.js\";\nimport { FormatQualifier } from \"../../format/FormatQualifier.js\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n    constructor(remoteURL) {\n        super();\n        this._qualifierModel = {\n            sourceType: 'fetch',\n            url: remoteURL\n        };\n        this._remoteURL = remoteURL;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        if (this._format) {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._qualifierModel.format = format.toString();\n        this._format = format;\n        return this;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { url, transformation, format } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(url);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        if (format) {\n            result.format(new FormatQualifier(format));\n        }\n        return result;\n    }\n}\nexport { FetchSource };\n", "import { TextStyle } from \"../../qualifiers/textStyle.js\";\nimport { solid } from \"../../qualifiers/textStroke.js\";\n/**\n * Create TextStyle from ITextStyleModel\n * @param textStyleModel\n */\nexport function createTextStyleFromModel(textStyleModel) {\n    const { fontFamily, fontSize, fontWeight, fontStyle, fontAntialias, fontHinting, textDecoration, textAlignment, stroke, letterSpacing, lineSpacing, } = textStyleModel;\n    const result = new TextStyle(fontFamily, fontSize);\n    if (fontWeight) {\n        result.fontWeight(fontWeight);\n    }\n    if (fontStyle) {\n        result.fontStyle(fontStyle);\n    }\n    if (fontAntialias) {\n        result.fontAntialias(fontAntialias);\n    }\n    if (fontHinting) {\n        result.fontHinting(fontHinting);\n    }\n    if (textDecoration) {\n        result.textDecoration(textDecoration);\n    }\n    if (textAlignment) {\n        result.textAlignment(textAlignment);\n    }\n    if (stroke) {\n        result.stroke();\n        if (typeof stroke !== \"boolean\") {\n            result.stroke(solid(stroke.width, stroke.color));\n        }\n    }\n    if (letterSpacing) {\n        result.letterSpacing(letterSpacing);\n    }\n    if (lineSpacing) {\n        result.lineSpacing(lineSpacing);\n    }\n    return result;\n}\n", "import { BaseTextSource } from \"./BaseTextSource.js\";\nimport { createTextStyleFromModel } from \"../../../internal/models/createTextStyleFromModel.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseTextSource}\n * @description Defines how to manipulate a text layer\n */\nclass TextSource extends BaseTextSource {\n    constructor(fileName, textStyle) {\n        /* istanbul ignore next */\n        super(fileName, textStyle);\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { text, textStyle, textColor, backgroundColor, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(text, textStyle ? createTextStyleFromModel(textStyle) : undefined);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        if (textColor) {\n            result.textColor(textColor);\n        }\n        if (backgroundColor) {\n            result.backgroundColor(backgroundColor);\n        }\n        return result;\n    }\n}\nexport { TextSource };\n", "import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\nfunction image(publicID) {\n    return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\nfunction text(text, textStyle) {\n    return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction video(publicID) {\n    return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction subtitles(fileName) {\n    return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\nfunction fetch(remoteURL) {\n    return new FetchSource(remoteURL);\n}\nconst Source = { image, text, video, subtitles, fetch };\nexport { Source, image, text, video, subtitles, fetch };\n"],
  "mappings": "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",
  "names": ["normal", "normal", "normal", "text", "text", "text", "text"]
}

{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/actions/roundCorners/RoundCornersAction.js", "../../@cloudinary/transformation-builder-sdk/actions/roundCorners.js"],
  "sourcesContent": ["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description A class to round one or more corners of an image or video.\n * @extends SDK.Action\n * @memberOf Actions.RoundCorners\n * @see Visit {@link Actions.RoundCorners|RoundCorners} for an example\n */\nclass RoundCornersAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'roundCorners';\n    }\n    /**\n     * @param {number} a\n     * @param {number} b\n     * @param {number} c\n     * @param {number} d\n     * @return {RoundCornersAction}\n     */\n    radius(a, b, c, d) {\n        const qualifierValue = new QualifierValue();\n        // In case a === 0, check typeof\n        a !== undefined && qualifierValue.addValue(a);\n        b !== undefined && qualifierValue.addValue(b);\n        c !== undefined && qualifierValue.addValue(c);\n        d !== undefined && qualifierValue.addValue(d);\n        const definedRadiuses = [a, b, c, d].filter((r) => r !== undefined);\n        this._radius = definedRadiuses;\n        this._actionModel.radius = definedRadiuses;\n        this.addQualifier(new Qualifier('r').addValue(qualifierValue));\n        return this;\n    }\n    /**\n     * @description Applies maximum rounding to the corners of the asset. An asset with square dimensions becomes a circle.\n     */\n    max() {\n        this._radius = 'max';\n        this._actionModel.radius = 'max';\n        return this.addQualifier(new Qualifier('r', 'max'));\n    }\n    getRadius() {\n        return this._radius;\n    }\n    static fromJson(actionModel) {\n        const { radius } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        if (Array.isArray(radius)) {\n            result.radius(radius[0], radius[1], radius[2], radius[3]);\n        }\n        if (radius === 'max') {\n            result.max();\n        }\n        return result;\n    }\n}\nexport default RoundCornersAction;\n", "/**\n * @description Round one or more corners of an image or video.\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rounding_corners_and_creating_circular_images|Rounded images}\n * {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rounding|Rounded videos}\n * @memberOf Actions\n * @namespace RoundCorners\n * @example\n * <caption>Round corners by a radius</caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {byRadius, max} from \"@cloudinary/url-gen/actions/roundCorners\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * // By a radius\n * image.roundCorners(byRadius(10));\n * // Or just the maximum possible\n * image.roundCorners(max());\n * image.toString();\n */\nimport RoundCornersAction from \"./roundCorners/RoundCornersAction.js\";\n/**\n * @summary action\n * @description Generates an asset with a circular crop using the 'max' radius value.\n * @memberOf Actions.RoundCorners\n * @return {Actions.RoundCorners.RoundCornersAction}\n */\nfunction max() {\n    return new RoundCornersAction().max();\n}\n/**\n * @summary action\n * @description Rounds the specified corners of an image or a video by specifying 1-4 pixel values as follows:\n *\n * * 1 value: All four corners are rounded equally according to the specified value.\n * * 2 values: 1st value => top-left & bottom-right. 2nd value => top-right & bottom-left.\n * * 3 values: 1st value => top-left. 2nd value => top-right & bottom-left. 3rd value => bottom-right.\n * * 4 values: Each corner specified separately, in clockwise order, starting with top-left.\n *\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @memberOf Actions.RoundCorners\n * @return {Actions.RoundCorners.RoundCornersAction}\n */\nfunction byRadius(a, b, c, d) {\n    return new RoundCornersAction().radius(a, b, c, d);\n}\nconst RoundCorners = { byRadius, max };\nexport { RoundCorners, byRadius, max };\n"],
  "mappings": ";;;;;;;AASA,IAAM,qBAAN,cAAiC,OAAO;AAAA,EACpC,cAAc;AACV,UAAM;AACN,SAAK,eAAe,CAAC;AACrB,SAAK,aAAa,aAAa;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,GAAG,GAAG,GAAG,GAAG;AACf,UAAM,iBAAiB,IAAI,eAAe;AAE1C,UAAM,UAAa,eAAe,SAAS,CAAC;AAC5C,UAAM,UAAa,eAAe,SAAS,CAAC;AAC5C,UAAM,UAAa,eAAe,SAAS,CAAC;AAC5C,UAAM,UAAa,eAAe,SAAS,CAAC;AAC5C,UAAM,kBAAkB,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS;AAClE,SAAK,UAAU;AACf,SAAK,aAAa,SAAS;AAC3B,SAAK,aAAa,IAAI,UAAU,GAAG,EAAE,SAAS,cAAc,CAAC;AAC7D,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM;AACF,SAAK,UAAU;AACf,SAAK,aAAa,SAAS;AAC3B,WAAO,KAAK,aAAa,IAAI,UAAU,KAAK,KAAK,CAAC;AAAA,EACtD;AAAA,EACA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,OAAO,SAAS,aAAa;AACzB,UAAM,EAAE,OAAO,IAAI;AAGnB,UAAM,SAAS,IAAI,KAAK;AACxB,QAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,aAAO,OAAO,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAAA,IAC5D;AACA,QAAI,WAAW,OAAO;AAClB,aAAO,IAAI;AAAA,IACf;AACA,WAAO;AAAA,EACX;AACJ;AACA,IAAO,6BAAQ;;;AChCf,SAAS,MAAM;AACX,SAAO,IAAI,2BAAmB,EAAE,IAAI;AACxC;AAiBA,SAAS,SAAS,GAAG,GAAG,GAAG,GAAG;AAC1B,SAAO,IAAI,2BAAmB,EAAE,OAAO,GAAG,GAAG,GAAG,CAAC;AACrD;AACA,IAAM,eAAe,EAAE,UAAU,IAAI;",
  "names": []
}
